<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端数组的操作方法</title>
      <link href="/2024/05/12/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
      <url>/2024/05/12/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一、改变原数组的方法"><a href="#一、改变原数组的方法" class="headerlink" title="一、改变原数组的方法"></a>一、改变原数组的方法</h2><h3 id="1-push（）-末尾添加数据"><a href="#1-push（）-末尾添加数据" class="headerlink" title="1.push（） 末尾添加数据"></a>1.push（） 末尾添加数据</h3><p>语法: 数组名.push(数据)</p><p>作用: 就是往数组末尾添加数据</p><p>返回值: 就是这个数组的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">res = arr.<span class="title function_">push</span>(<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[10,20,30,40,20]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//5</span></span><br></pre></td></tr></table></figure><h3 id="2-pop（）-末尾出删除数据"><a href="#2-pop（）-末尾出删除数据" class="headerlink" title="2.pop（） 末尾出删除数据"></a>2.pop（） 末尾出删除数据</h3><p>语法:数组名.pop()</p><p>作用: 就是从数组的末尾删除一个数据</p><p>返回值: 就是你删除的那个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pop</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>] </span><br><span class="line">res =arr.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[10,20,30]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//40</span></span><br></pre></td></tr></table></figure><h3 id="3-unshift（）-头部添加数据"><a href="#3-unshift（）-头部添加数据" class="headerlink" title="3.unshift（） 头部添加数据"></a>3.unshift（） 头部添加数据</h3><p>语法: 数组名.unshift(数据)</p><p>作用: 就是在数组的头部添加数据</p><p>返回值: 就是数组的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pop</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">res=arr.<span class="title function_">unshift</span>(<span class="number">99</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[99,10,20,30,40]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-shift（）-头部删除数据"><a href="#4-shift（）-头部删除数据" class="headerlink" title="4.shift（） 头部删除数据"></a>4.shift（） 头部删除数据</h3><p>语法: 数组名.shift()</p><p>作用: 头部删除一个数据</p><p>返回值: 就是删除掉的那个数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//shift</span></span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line"> res=arr.<span class="title function_">shift</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);[<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-reverse（）-翻转数组"><a href="#5-reverse（）-翻转数组" class="headerlink" title="5.reverse（） 翻转数组"></a>5.reverse（） 翻转数组</h3><p>语法: 数组名.reverse()</p><p>作用: 就是用来翻转数组的</p><p>返回值: 就是翻转好的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reverse</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br><span class="line">res=arr.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[40,30,20,10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//[40,30,20,10]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-sort（）-排序"><a href="#6-sort（）-排序" class="headerlink" title="6.sort（） 排序"></a>6.sort（） 排序</h3><p>语法一: 数组名.sort()                       会排序 会按照位排序</p><p>语法二: 数组名.sort(function (a,b) {return a-b})  会正序排列</p><p>语法三: 数组名.sort(function (a,b) {return b-a})  会倒序排列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort()</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">63</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">75</span>, <span class="number">69</span>, <span class="number">11</span>, <span class="number">23</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span>(a-b)&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span>(b-a)&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><h3 id="7-splice（）-截取数组"><a href="#7-splice（）-截取数组" class="headerlink" title="7.splice（）  截取数组"></a>7.splice（）  截取数组</h3><p>语法一: 数组名.splice(开始索引,多少个)</p><p>作用: 就是用来截取数组的</p><p>返回值: 是一个新数组 里面就是你截取出来的数据</p><p>语法二: 数组名.splice(开始索引,多少个,你要插入的数据)</p><p>作用: 删除并插入数据</p><p>注意: 从你的开始索引起</p><p>返回值: 是一个新数组 里面就是你截取出来的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//splice() 语法一</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">63</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">75</span>]</span><br><span class="line">res = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">//******************************</span></span><br><span class="line"><span class="comment">//splice() 语法二</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">63</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">75</span>]</span><br><span class="line">res = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">99999</span>,<span class="number">88888</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h2 id="二、不改变原数组的方法"><a href="#二、不改变原数组的方法" class="headerlink" title="二、不改变原数组的方法"></a>二、不改变原数组的方法</h2><h3 id="1-concat（）-合并数组"><a href="#1-concat（）-合并数组" class="headerlink" title="1.concat（）  合并数组"></a>1.concat（）  合并数组</h3><p>语法: 数组名.concat(数据)</p><p>作用: 合并数组的</p><p>返回值: 一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//concat</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">concat</span>(<span class="number">20</span>,<span class="string">&quot;小敏&quot;</span>,<span class="number">50</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h3 id="2-join（）-数组转字符串"><a href="#2-join（）-数组转字符串" class="headerlink" title="2.join（） 数组转字符串"></a>2.join（） 数组转字符串</h3><p>语法:数组名.join(‘连接符’)</p><p>作用: 就是把一个数组转成字符串</p><p>返回值: 就是转好的一个字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//join</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h3 id="3-slice（）截取数组的一部分数据"><a href="#3-slice（）截取数组的一部分数据" class="headerlink" title="3.slice（）截取数组的一部分数据"></a>3.slice（）截取数组的一部分数据</h3><p>语法: 数组名.slice(开始索引,结束索引)</p><p>作用: 就是截取数组中的一部分数据</p><p>返回值: 就是截取出来的数据 放到一个新的数组中</p><p>注意: 包前不好后 包含开始索引不包含结束索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//slice</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h3 id="4-indexOf-从左检查数组中有没有这个数值"><a href="#4-indexOf-从左检查数组中有没有这个数值" class="headerlink" title="4.indexOf 从左检查数组中有没有这个数值"></a>4.indexOf 从左检查数组中有没有这个数值</h3><p>语法一:数组名.indexOf(要查询的数据)</p><p>作用: 就是检查这个数组中有没有该数据</p><p>如果有就返回该数据第一次出现的索引</p><p>如果没有返回 -1</p><p>语法二:数组名.indexOf(要查询的数据,开始索引)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//indexOf 语法一</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">indexOf</span>(<span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">//*************************************</span></span><br><span class="line"><span class="comment">//indexOf  语法二</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">indexOf</span>(<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h3 id="5-lastIndexOf-从右检查数组中有没有这个数值"><a href="#5-lastIndexOf-从右检查数组中有没有这个数值" class="headerlink" title="5.lastIndexOf 从右检查数组中有没有这个数值"></a>5.lastIndexOf 从右检查数组中有没有这个数值</h3><p>语法一:数组名.indexOf(要查询的数据)</p><p>作用: 就是检查这个数组中有没有该数据</p><p>如果有就返回该数据第一次出现的索引</p><p>如果没有返回 -1</p><p>语法二:数组名.lastIndexOf(要查询的数据,开始索引)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lastIndexOf 语法一</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">lastIndexOf</span>(<span class="number">50</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"><span class="comment">//*************************************</span></span><br><span class="line"><span class="comment">//lastIndexOf 语法二</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">res = arr.<span class="title function_">lastIndexOf</span>(<span class="number">50</span>,<span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h1 id="三、ES6新增的数组方法"><a href="#三、ES6新增的数组方法" class="headerlink" title="三、ES6新增的数组方法"></a>三、ES6新增的数组方法</h1><h2 id="1-forEach-用来循环遍历的-for"><a href="#1-forEach-用来循环遍历的-for" class="headerlink" title="1. forEach()   用来循环遍历的 for"></a>1. forEach()   用来循环遍历的 for</h2><p>语法: 数组名.forEach(function (item,index,arr) {})</p><ul><li>item : 这个表示的是数组中的每一项</li><li>index : 这个表示的是每一项对应的索引</li><li>arr : 这个表示的是原数组</li></ul><p>作用: 就是用来循环遍历数组的 代替了我们的for</p><p>返回值: 没有返回值 如果真的说要有返回值就是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forEach</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item, <span class="string">&quot;------&quot;</span>, index, <span class="string">&quot;-------&quot;</span>, arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-map-映射数组的"><a href="#2-map-映射数组的" class="headerlink" title="2.map  映射数组的"></a>2.map  映射数组的</h2><p>语法: 数组名.map(function (item,index,arr) {})</p><ul><li>item : 这个表示的是数组中的每一项</li><li>index : 这个表示的是每一项对应的索引</li><li>arr : 这个表示的是原数组</li></ul><p>作用: 就是用来映射</p><p>返回值: 必然是一个数组 一个映射完毕的数组；这个数组合原数组长度一样</p><p>注意: 要以return的形式执行返回条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item*<span class="number">1000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h2 id="3-filter-过滤数组"><a href="#3-filter-过滤数组" class="headerlink" title="3.filter  过滤数组"></a>3.filter  过滤数组</h2><pre><code>语法: 数组名.filter(function (item,index,arr) &#123;&#125;)+ item : 这个表示的是数组中的每一项+ index : 这个表示的是每一项对应的索引+ arr : 这个表示的是原数组作用: 用来过滤数组的返回值: 如果有就是过滤(筛选)出来的数据 保存在一个数组中；如果没有返回一个空数组</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filter</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h2 id="4-every-判断数组是不是满足所有条件"><a href="#4-every-判断数组是不是满足所有条件" class="headerlink" title="4.every  判断数组是不是满足所有条件"></a>4.every  判断数组是不是满足所有条件</h2><pre><code>语法: 数组名.every(function (item,index,arr) &#123;&#125;)</code></pre><ul><li><p>item : 这个表示的是数组中的每一项</p></li><li><p>index : 这个表示的是每一项对应的索引</p></li><li><p>arr : 这个表示的是原数组</p></li></ul><p>作用: 主要是用来判断数组中是不是 每一个 都满足条件<br>        只有所有的都满足条件返回的是true<br>        只要有一个不满足返回的就是false</p><pre><code>返回值: 是一个布尔值注意: 要以return的形式执行返回条件</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//every</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//打印结果  true</span></span><br></pre></td></tr></table></figure><h2 id="5-some（）-数组中有没有满足条件的"><a href="#5-some（）-数组中有没有满足条件的" class="headerlink" title="5.some（） 数组中有没有满足条件的"></a>5.some（） 数组中有没有满足条件的</h2><p>   语法: 数组名.some(function (item,index,arr) {})</p><ul><li><p>item : 这个表示的是数组中的每一项</p></li><li><p>index : 这个表示的是每一项对应的索引</p></li><li><p>arr : 这个表示的是原数组</p></li></ul><p>作用: 主要是用来判断数组中是不是 每一个 都满足条件</p><p> 只有有一个满足条件返回的是true</p><p> 只要都不满足返回的就是false</p><p>返回值: 是一个布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//every</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//打印结果  true</span></span><br></pre></td></tr></table></figure><h2 id="5-some（）-数组中有没有满足条件的-1"><a href="#5-some（）-数组中有没有满足条件的-1" class="headerlink" title="5.some（） 数组中有没有满足条件的"></a>5.some（） 数组中有没有满足条件的</h2><p>   语法: 数组名.some(function (item,index,arr) {})</p><ul><li><p>item : 这个表示的是数组中的每一项</p></li><li><p>index : 这个表示的是每一项对应的索引</p></li><li><p>arr : 这个表示的是原数组</p></li></ul><p>作用: 主要是用来判断数组中是不是 每一个 都满足条件</p><p> 只有有一个满足条件返回的是true</p><p> 只要都不满足返回的就是false</p><p>返回值: 是一个布尔值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//some</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="6-find（）用来获取数组中满足条件的第一个数据"><a href="#6-find（）用来获取数组中满足条件的第一个数据" class="headerlink" title="6.find（）用来获取数组中满足条件的第一个数据"></a>6.find（）用来获取数组中满足条件的第一个数据</h2><p>  语法: 数组名.find(function (item,index,arr) {})</p><ul><li><p>item : 这个表示的是数组中的每一项</p></li><li><p>index : 这个表示的是每一项对应的索引</p></li><li><p>arr : 这个表示的是原数组</p></li></ul><p>作用: 用来获取数组中满足条件的数据</p><p>返回值: 如果有 就是满足条件的第一个数据；如果没有就是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原始数组 : &#x27;</span>, arr);</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)<span class="comment">//4</span></span><br></pre></td></tr></table></figure><h2 id="7-reduce（）叠加后的效果"><a href="#7-reduce（）叠加后的效果" class="headerlink" title="7.reduce（）叠加后的效果"></a>7.reduce（）叠加后的效果</h2><p>  语法: 数组名.reduce(function (prev,item,index,arr) {},初始值)</p><ul><li><p>prev :一开始就是初始值 当第一次有了结果以后；这个值就是第一次的结果</p></li><li><p>item : 这个表示的是数组中的每一项</p></li><li><p>index : 这个表示的是每一项对应的索引</p></li><li><p>arr : 这个表示的是原数组</p></li></ul><p>作用: 就是用来叠加的</p><p>返回值: 就是叠加后的结果</p><p>注意: 以return的形式书写返回条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reduce</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">prev, item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prev *= item</span><br><span class="line">&#125;, <span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);<span class="comment">//120</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>节流和防抖的应用</title>
      <link href="/2024/05/07/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2024/05/07/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、防抖和节流（详细）-使用场景和区别"><a href="#一、防抖和节流（详细）-使用场景和区别" class="headerlink" title="一、防抖和节流（详细） 使用场景和区别"></a>一、防抖和节流（详细） 使用场景和区别</h1><h3 id="1-防抖-（多次触发-只执行最后一次）"><a href="#1-防抖-（多次触发-只执行最后一次）" class="headerlink" title="1.防抖 （多次触发 只执行最后一次）"></a>1.防抖 （多次触发 只执行最后一次）</h3><p><strong>作用：</strong> 高频率触发的事件,在指定的单位时间内，只响应最后一次，如果在指定的时间内再次触发，则重新计算时间<br><em>防抖类似于英雄联盟回城6秒，如果回城中被打断，再次回城需要再等6秒</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">// 1.封装防抖函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, time</span>) &#123;</span><br><span class="line">        <span class="comment">// 4.创建一个标记用来存放定时器的返回值</span></span><br><span class="line">        <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 5.每当用户触发input事件  把前一个 setTimeout 清楚掉</span></span><br><span class="line">            <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">            <span class="comment">// 6.然后又创建一个新的 setTimeout, 这样就能保证输入字符后等待的间隔内 还有字符输入的话，就不会执行 setTimeout里面的内容</span></span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 7.这里进行防抖的内容</span></span><br><span class="line">                <span class="title function_">fn</span>();</span><br><span class="line">            &#125;, time);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.获取inpt元素</span></span><br><span class="line">    <span class="keyword">var</span> inp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;inp&#x27;</span>);</span><br><span class="line"><span class="comment">// 8. 测试防抖临时使用的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;防抖成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.给inp绑定input事件  调用封装的防抖函数  传入要执行的内容与间隔事件 </span></span><br><span class="line">    inp.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="title function_">debounce</span>(sayHi, <span class="number">5000</span>)); </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-节流-（规定时间内-只触发一次）"><a href="#2-节流-（规定时间内-只触发一次）" class="headerlink" title="2.节流 （规定时间内 只触发一次）"></a>2.节流 （规定时间内 只触发一次）</h3><p><strong>作用：</strong> 高频率触发的事件,在指定的单位时间内，只响应第一次<br><em>节流类似于英雄联盟里的英雄平A  一定是内点击多次只进行攻击一次</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.封装节流函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, time</span>) &#123;</span><br><span class="line">        <span class="comment">//3. 通过闭包保存一个 &quot;节流阀&quot; 默认为false</span></span><br><span class="line">        <span class="keyword">let</span> temp = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//8.触发事件被调用 判断&quot;节流阀&quot; 是否为true  如果为true就直接trurn出去不做任何操作</span></span><br><span class="line">            <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//4. 如果节流阀为false  立即将节流阀设置为true</span></span><br><span class="line">                temp = <span class="literal">true</span>; <span class="comment">//节流阀设置为true</span></span><br><span class="line">                <span class="comment">//5.  开启定时器</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">//6. 将外部传入的函数的执行放在setTimeout中</span></span><br><span class="line">                    fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">                    <span class="comment">//7. 最后在setTimeout执行完毕后再把标记&#x27;节流阀&#x27;为false(关键)  表示可以执行下一次循环了。当定时器没有执行的时候标记永远是true，在开头被return掉</span></span><br><span class="line">                    temp = <span class="literal">false</span>;</span><br><span class="line">                &#125;, time);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// 打印当前 document 的宽高</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">innerWidth</span>, e.<span class="property">target</span>.<span class="property">innerHeight</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.绑定事件，绑定时就调用节流函数  </span></span><br><span class="line">    <span class="comment">// 敲黑板！！！ 这里是重点 绑定是就要调用一下封装的节流函数 触发事件是触发封装函数内部的函数</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="title function_">throttle</span>(sayHi, <span class="number">2000</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web、js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性（一）</title>
      <link href="/2024/04/18/ES6%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/04/18/ES6%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是ES6"><a href="#一、什么是ES6" class="headerlink" title="一、什么是ES6"></a>一、什么是ES6</h1><h6 id="ES全称为ECMAScript，它是由国际标准化组织ECMA（全称：European-Computer-Manufacturers-Association）欧洲计算机制造商协会制定的一项脚本语言的标准化规范。JavaScript就实现了这套标准。ES6中的6代表的是版本，从2015年6月份发布的版本及其后续版本统称为ES6，从2015年开始，每年的6月份都会发布新版本。目前各大浏览器产商也都已经支持ES6。"><a href="#ES全称为ECMAScript，它是由国际标准化组织ECMA（全称：European-Computer-Manufacturers-Association）欧洲计算机制造商协会制定的一项脚本语言的标准化规范。JavaScript就实现了这套标准。ES6中的6代表的是版本，从2015年6月份发布的版本及其后续版本统称为ES6，从2015年开始，每年的6月份都会发布新版本。目前各大浏览器产商也都已经支持ES6。" class="headerlink" title="ES全称为ECMAScript，它是由国际标准化组织ECMA（全称：European Computer Manufacturers Association）欧洲计算机制造商协会制定的一项脚本语言的标准化规范。JavaScript就实现了这套标准。ES6中的6代表的是版本，从2015年6月份发布的版本及其后续版本统称为ES6，从2015年开始，每年的6月份都会发布新版本。目前各大浏览器产商也都已经支持ES6。"></a>ES全称为ECMAScript，它是由国际标准化组织ECMA（全称：European Computer Manufacturers Association）欧洲计算机制造商协会制定的一项脚本语言的标准化规范。JavaScript就实现了这套标准。ES6中的6代表的是版本，从2015年6月份发布的版本及其后续版本统称为ES6，从2015年开始，每年的6月份都会发布新版本。目前各大浏览器产商也都已经支持ES6。</h6><h1 id="二、ES6的新特性有哪些？"><a href="#二、ES6的新特性有哪些？" class="headerlink" title="二、ES6的新特性有哪些？"></a>二、ES6的新特性有哪些？</h1><p><code>1.新增了块级作用域（let，const）</code></p><p><code>2.提供了定义类的语法糖（class）</code></p><p><code>3.新增了一种基本数据类型（Symbol）</code></p><p><code>4.新增了变量的解构赋值</code></p><p><code>5.函数参数允许设置默认值，引入了rest参数，新增了箭头函数。</code></p><p><code>6.数组新增了一些API，如isArray / from / of 方法；数组实例新增了 entries()，keys() 和 values() 等方法。</code></p><p><code>7.对象和数组新增了扩展运算符</code></p><p><code>8.ES6新增了模块化（import / export）</code></p><p><code>9.ES6新增了Set和Map数据结构。</code></p><p><code>10.ES6原生提供Proxy构造函数，用来生成Proxy实例</code></p><p><code>11.ES6新增了生成器（Generator）和遍历器（Iterator）</code></p><p>解构：分解数据结构。<br>赋值：为变量赋值。<br>解构赋值：从数组或者对象中提取值，按照对应的位置，对变量赋值（在数组解构中，只 要解构的目标可以遍历，就可以实现解构赋值）。</p><h3 id="1：数组解构赋值的特点："><a href="#1：数组解构赋值的特点：" class="headerlink" title="1：数组解构赋值的特点："></a>1：数组解构赋值的特点：</h3><p>在数组解构中，左边用中括号包裹任意个变量，右边则是一个真实的数组，按照 一 一 对应的关系进行赋值，在赋值过程中有以下几种情况：</p><p><code>1.1：声明的变量数量与数组的元素数量一致：</code></p><p><code>1.2：声明的变量的数量大于数组的元素的数量：</code></p><p><code>1.3：声明的变量的数量小于数组的元素的数量：</code></p><p><code>1.4：使用剩余运算符进行解构赋值：</code></p><p><code>1.5：可遍历对象 例如：字符串：</code></p><p>var、let、const各自的特点及其区别</p><p><code>在ES6之前只有全局作用域和局部作用域，ES6新增了块级作用域let和const,下面将简单介绍var、let和const的特点以及区别。</code></p><p><code>块级作用域：只能在声明的区域（代码块）中使用，不能在声明的区域的外部使用，否则报（xxx is not defined）。</code></p><p><code>var：使用var声明的变量，其作用域为该变量所在的函数内，且存在变量提升现象（变量提升：可以先使用再声明），不会受到块级作用域的影响</code></p><p><code>let：ES6新增的块级作用域</code><br><code>1：使用let声明的变量具有块级作用域:，只能在当前声明的代码块中使用，必须要先声明再使用</code><br><code>2：具有暂时性死区特性。</code></p><p><code>const：ES6中新增的常量（常量：值（内存地址）不可更改的量）。特点如下：</code></p><p><code>3.1：具有块级作用域的特点，只能在当前声明的代码块中使用，必须要先声明再使用。</code></p><p><code>3.2：声明常量时必须赋值，如果不赋值报错：Missing initializer in const declaration（在const声明中未初始化）。</code></p><p><code>3.3：const声明的常量不可更改。</code></p><p><code>3.4：使用const声明的常量如果是基本数据类型（比如：数字、字符串），一旦赋值，值不可以更改；如果是引用数据类型（数组，对象），不能重新赋值，但是可以更改数据结构内部的值（比如修改对象中的属性）。</code></p><p>谈谈我对[箭头函数]的理解</p><p><code>1：箭头函数：ES6新增的定义函数的方式。</code></p><p><code>2：作用：用来简化函数定义的语法。</code></p><p><code>3：箭头函数的特点：</code></p><p><code>3.1：可以将箭头函数赋值给一个变量，变量名字就是函数的名字，通过变量名字调用函数。</code></p><p><code>3.2：如果函数体中只有一行代码，且代码的执行结果就是返回值，可以省略大括号。</code></p><p><code>3.3：如果形参只有一个，可以省略小括号（如果没有形参，小括号不能省略）。</code></p><p>Map数据结构</p><p><code>1：Map：类似于对象，是一个存储键值对的集合，但是‘键’’的范围不仅仅是字符串，所有类型的值包括对象都可以当做键。</code></p><p><code>2：创建Map集合：</code></p><p><code>2.1：创建Map集合有两种：1.直接new Map()创建实例对象；2.接收一个数组作为参数来创建实例对象（该数组的成员必须是一个个表示键值对的数组）。</code></p><p><code>3：Map集合常用属性和方法：</code></p><p><code>3.1：.has(key);查找key,返回布尔值。</code></p><p><code>3.2：.get(key) 根据key查找value。</code></p><p><code>3.3：.set(key,value) 添加键值对。</code></p><p><code>3.4：.size获取存储的数量。</code></p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
